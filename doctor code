import json

class Doctor:
    def __init__(self, name, specialization):
        self.name = name
        self.specialization = specialization

    def __str__(self):
        return f"Dr. {self.name} - {self.specialization}"

    def update_specialization(self, new_specialization):
        self.specialization = new_specialization
        print(f"Updated specialization for Dr. {self.name} to {self.specialization}")


class Patient:
    def __init__(self, name, contact_info):
        self.name = name
        self.contact_info = contact_info

    def __str__(self):
        return f"Patient: {self.name}, Contact: {self.contact_info}"

    def update_contact_info(self, new_contact_info):
        self.contact_info = new_contact_info
        print(f"Updated contact info for {self.name} to {self.contact_info}")


class Appointment:
    def __init__(self, doctor, patient, date_time):
        self.doctor = doctor
        self.patient = patient
        self.date_time = date_time

    def __str__(self):
        return f"Appointment with {self.doctor} on {self.date_time} for {self.patient}"


class BookingSystem:
    def __init__(self):
        self.doctors = []
        self.patients = []
        self.appointments = []

    def add_doctor(self, name, specialization):
        if any(doc.name == name for doc in self.doctors):
            print(f"Doctor with name {name} already exists.")
            return
        new_doctor = Doctor(name, specialization)
        self.doctors.append(new_doctor)
        print(f"Added doctor: {new_doctor}")

    def add_patient(self, name, contact_info):
        if any(pat.name == name for pat in self.patients):
            print(f"Patient with name {name} already exists.")
            return
        new_patient = Patient(name, contact_info)
        self.patients.append(new_patient)
        print(f"Added patient: {new_patient}")

    def update_doctor_specialization(self, name, new_specialization):
        doctor = next((doc for doc in self.doctors if doc.name == name), None)
        if doctor:
            doctor.update_specialization(new_specialization)
        else:
            print(f"No doctor found with the name {name}")

    def update_patient_contact(self, name, new_contact_info):
        patient = next((pat for pat in self.patients if pat.name == name), None)
        if patient:
            patient.update_contact_info(new_contact_info)
        else:
            print(f"No patient found with the name {name}")

    def book_appointment(self, doctor_name, patient_name, date_time):
        doctor = next((doc for doc in self.doctors if doc.name == doctor_name), None)
        patient = next((pat for pat in self.patients if pat.name == patient_name), None)

        if doctor is None:
            print(f"No doctor found with the name {doctor_name}")
            return
        if patient is None:
            print(f"No patient found with the name {patient_name}")
            return

        # Check for existing appointments
        if any(app.doctor == doctor and app.date_time == date_time for app in self.appointments):
            print(f"Doctor {doctor_name} already has an appointment at {date_time}")
            return
        if any(app.patient == patient and app.date_time == date_time for app in self.appointments):
            print(f"Patient {patient_name} already has an appointment at {date_time}")
            return

        new_appointment = Appointment(doctor, patient, date_time)
        self.appointments.append(new_appointment)
        print(f"Booked appointment: {new_appointment}")

    def cancel_appointment(self, doctor_name, patient_name, date_time):
        appointment = next((app for app in self.appointments 
                            if app.doctor.name == doctor_name and 
                            app.patient.name == patient_name and 
                            app.date_time == date_time), None)
        if appointment:
            self.appointments.remove(appointment)
            print(f"Cancelled appointment: {appointment}")
        else:
            print(f"No appointment found for Dr. {doctor_name} with {patient_name} on {date_time}")

    def list_doctors(self):
        if not self.doctors:
            print("No doctors available.")
        for doctor in self.doctors:
            print(doctor)

    def list_patients(self):
        if not self.patients:
            print("No patients available.")
        for patient in self.patients:
            print(patient)

    def show_appointments(self):
        if not self.appointments:
            print("No appointments scheduled.")
        for appointment in self.appointments:
            print(appointment)

    def save_to_file(self, filename):
        data = {
            'doctors': [{'name': doc.name, 'specialization': doc.specialization} for doc in self.doctors],
            'patients': [{'name': pat.name, 'contact_info': pat.contact_info} for pat in self.patients],
            'appointments': [{'doctor': app.doctor.name, 'patient': app.patient.name, 'date_time': app.date_time} for app in self.appointments]
        }
        with open(filename, 'w') as file:
            json.dump(data, file)
        print(f"Data saved to {filename}")

    def load_from_file(self, filename):
        try:
            with open(filename, 'r') as file:
                data = json.load(file)
                self.doctors = [Doctor(doc['name'], doc['specialization']) for doc in data['doctors']]
                self.patients = [Patient(pat['name'], pat['contact_info']) for pat in data['patients']]
                self.appointments = [
                    Appointment(
                        doctor=next(doc for doc in self.doctors if doc.name == app['doctor']),
                        patient=next(pat for pat in self.patients if pat.name == app['patient']),
                        date_time=app['date_time']
                    ) for app in data['appointments']
                ]
            print(f"Data loaded from {filename}")
        except FileNotFoundError:
            print(f"File {filename} not found.")
        except json.JSONDecodeError:
            print(f"Error decoding JSON from file {filename}")


# Command-line interface for user interaction
def main():
    system = BookingSystem()

    while True:
        print("\nBooking System Menu")
        print("1. Add Doctor")
        print("2. Add Patient")
        print("3. Update Doctor Specialization")
        print("4. Update Patient Contact Info")
        print("5. Book Appointment")
        print("6. Cancel Appointment")
        print("7. List Doctors")
        print("8. List Patients")
        print("9. Show Appointments")
        print("10. Save Data to File")
        print("11. Load Data from File")
        print("12. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            name = input("Enter doctor name: ")
            specialization = input("Enter doctor specialization: ")
            system.add_doctor(name, specialization)
        elif choice == '2':
            name = input("Enter patient name: ")
            contact_info = input("Enter patient contact info: ")
            system.add_patient(name, contact_info)
        elif choice == '3':
            name = input("Enter doctor name: ")
            new_specialization = input("Enter new specialization: ")
            system.update_doctor_specialization(name, new_specialization)
        elif choice == '4':
            name = input("Enter patient name: ")
            new_contact_info = input("Enter new contact info: ")
            system.update_patient_contact(name, new_contact_info)
        elif choice == '5':
            doctor_name = input("Enter doctor name: ")
            patient_name = input("Enter patient name: ")
            date_time = input("Enter appointment date and time (YYYY-MM-DD HH:MM): ")
            system.book_appointment(doctor_name, patient_name, date_time)
        elif choice == '6':
            doctor_name = input("Enter doctor name: ")
            patient_name = input("Enter patient name: ")
            date_time = input("Enter appointment date and time (YYYY-MM-DD HH:MM): ")
            system.cancel_appointment(doctor_name, patient_name, date_time)
        elif choice == '7':
            system.list_doctors()
        elif choice == '8':
            system.list_patients()
        elif choice == '9':
            system.show_appointments()
        elif choice == '10':
            filename = input("Enter filename to save data: ")
            system.save_to_file(filename)
        elif choice == '11':
            filename = input("Enter filename to load data: ")
            system.load_from_file(filename)
        elif choice == '12':
            print("Exiting...")
            break
